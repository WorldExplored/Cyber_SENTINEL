import sqlite3
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import lightgbm as lgb

# Connect to the SQLite database
conn = sqlite3.connect('meta.db')

# Query to list all tables in the database
table_query = "SELECT name FROM sqlite_master WHERE type='table';"
tables = pd.read_sql_query(table_query, conn)

# Assuming you want to sample from the first table
if not tables.empty:
    table_name = tables['name'].iloc[0]
    
    # Define the number of rows to sample
    num_rows_to_sample = 100000  # Adjust this number based on your RAM capacity

    # Query to retrieve a subset of rows
    data_query = f"SELECT * FROM {table_name} LIMIT {num_rows_to_sample};"
    data_subset = pd.read_sql_query(data_query, conn)
    print(f"Loaded {len(data_subset)} rows from the table '{table_name}'.")
else:
    print("No tables found in the database.")

# Close the database connection
conn.close()

# Data Preparation
# Ensure that 'features_to_drop' only contains the columns you want to remove
features_to_drop = ['rl_ls_const_positives', 'sha256']  # Ensure 'sha256' is in the list of features to drop

# Drop the columns from the dataset
X = data_subset.drop(features_to_drop + ['is_malware'], axis=1)
y = data_subset['is_malware'] if 'is_malware' in data_subset.columns else None

if y is None:
    raise ValueError("'is_malware' column is not found. Check the DataFrame.")

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the LightGBM classifier
lgb_clf = lgb.LGBMClassifier()

# Train the classifier with the training data
lgb_clf.fit(X_train, y_train)

# Make predictions on the test set
y_pred = lgb_clf.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy}")

# Generate a classification report
print("Classification Report:")
print(classification_report(y_test, y_pred))
